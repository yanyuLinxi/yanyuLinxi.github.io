<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>深度学习辅助工具 on 阳阳的人间旅游日记</title><link>https://yanyulinxi.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7/</link><description>Recent content in 深度学习辅助工具 on 阳阳的人间旅游日记</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 08 Apr 2022 09:00:50 +0800</lastBuildDate><atom:link href="https://yanyulinxi.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>Huggingface基本使用介绍</title><link>https://yanyulinxi.github.io/post/study/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BA%93/huggingface%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</link><pubDate>Fri, 08 Apr 2022 09:00:50 +0800</pubDate><guid>https://yanyulinxi.github.io/post/study/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BA%93/huggingface%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</guid><description>这个教程怎么写 大致介绍。整个模型在干嘛。简单介绍一下主要的几个模块 给出代码流程示例： autoclass 微调 和 pipeline直接训练。 再详细讲解下主要模块：</description></item><item><title>Pytorch不常用命令随记</title><link>https://yanyulinxi.github.io/post/study/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BA%93/pytorch%E4%B8%8D%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9A%8F%E8%AE%B0/</link><pubDate>Thu, 07 Apr 2022 23:05:34 +0800</pubDate><guid>https://yanyulinxi.github.io/post/study/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BA%93/pytorch%E4%B8%8D%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9A%8F%E8%AE%B0/</guid><description>预训练模型导入和更改结构 导入VGG import torchvision.models as models vgg = models.vgg11(pretrained=False) # 查看vgg: print(vgg) &amp;#34;&amp;#34;&amp;#34; VGG( (features): Sequential( (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)) ... ... (classifier): Sequential( (0): Linear(in_features=25088, out_features=4096, bias=True) (1): ReLU(inplace=True) (2): Dropout(p=0.5, inplace=False) (3): Linear(in_features=4096, out_features=4096, bias=True) (4): ReLU(inplace=True) (5): Dropout(p=0.5, inplace=False) (6): Linear(in_features=4096, out_features=1000,</description></item><item><title>SHAP使用简略教程-特征解释方案</title><link>https://yanyulinxi.github.io/post/study/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BA%93/shap%E4%BD%BF%E7%94%A8%E7%AE%80%E7%95%A5%E6%95%99%E7%A8%8B/</link><pubDate>Thu, 07 Apr 2022 20:32:22 +0800</pubDate><guid>https://yanyulinxi.github.io/post/study/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BA%93/shap%E4%BD%BF%E7%94%A8%E7%AE%80%E7%95%A5%E6%95%99%E7%A8%8B/</guid><description>SHAP简介 SHAP全称是SHapley Additive exPlanation, 属于模型事后解释的方法，可以对复杂机器学习模型进行解释。 Shapley 值是博弈论中使用的解决方案概念，涉及将</description></item><item><title>Pandas学习笔记</title><link>https://yanyulinxi.github.io/post/study/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BA%93/pandas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Wed, 24 Nov 2021 09:40:51 +0800</pubDate><guid>https://yanyulinxi.github.io/post/study/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BA%93/pandas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>资料 https://github.com/datawhalechina/joyful-pandas pandas 临时杂碎知识点记录 .null()检测是否有空值 .sum()对pandas数值进行求和 .unique()检测pandas中的独一值。 t</description></item><item><title>Gensim学习笔记</title><link>https://yanyulinxi.github.io/post/study/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BA%93/gensim%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Fri, 22 Oct 2021 10:29:55 +0800</pubDate><guid>https://yanyulinxi.github.io/post/study/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BA%93/gensim%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>使用腾讯中文语料库 腾讯词向量使用方法： https://www.jianshu.com/p/65a29663130a 语料库地址： https://ai.tencent.com/ailab/nlp/zh/embedding.html 语料库 chinese-word-vectors: https://github.com/Embedding/Chinese-Word-Vectors 300维 腾讯词向量： https://www.jianshu.com/p/65a29663130a 200维，800万词。 其他多语言语料库 https://sites.google.com/site/rmyeid/projects/polyglot 使用gensi</description></item><item><title>PyOD学习笔记</title><link>https://yanyulinxi.github.io/post/study/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BA%93/pyod%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Sat, 09 Oct 2021 15:51:08 +0800</pubDate><guid>https://yanyulinxi.github.io/post/study/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BA%93/pyod%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>注意 里面有很多需要其他库的神经网络。比如keras。比如tensorflow。为了避免最后太过复杂，这些自己写最好。 样例 生成污染数据 contamination = 0.1 #</description></item><item><title>Seaborn学习笔记</title><link>https://yanyulinxi.github.io/post/study/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BA%93/seaborn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Thu, 30 Sep 2021 08:51:28 +0800</pubDate><guid>https://yanyulinxi.github.io/post/study/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BA%93/seaborn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>seaborn结合pandas来画好看的图。 最后网页显示的统计图，可以用seaborn画。 基本使用 seaborn中两种函数，第一种返回当前设</description></item><item><title>Matplotlib-2学习</title><link>https://yanyulinxi.github.io/post/study/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BA%93/matplotlib%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Wed, 29 Sep 2021 10:20:26 +0800</pubDate><guid>https://yanyulinxi.github.io/post/study/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BA%93/matplotlib%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>概览 setting 不同风格 plt.style.available 打印样式列表 plt.style.use(&amp;lsquo;seaborn&amp;rsquo;) 使用seaborn风格的图。 参数color可选项： b:blue c:cyan g:green k:black m:magenta r:red w:white y:yellow 结束时 plt.legend() 在图上放置图例。 设置坐标轴 plt.xlim(-1, 3.5) #设置</description></item><item><title>Numpy学习笔记</title><link>https://yanyulinxi.github.io/post/study/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BA%93/numpy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Wed, 29 Sep 2021 08:31:57 +0800</pubDate><guid>https://yanyulinxi.github.io/post/study/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BA%93/numpy%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>API 创建数组 numpy.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0) np.linspace(2.0, 3.0, num=5) output =&amp;gt; array([2. , 2.25, 2.5 , 2.75, 3. ]) np.random random.rand(d0, d1, &amp;hellip;, dn) d为size np.random.randn(d0, d1, &amp;hellip;, dn) Return a sample (or samples) from the “standard normal” distribution. random.randint(low, high=None, size=None, dtype=int) np.random.randint([1, 5,</description></item><item><title>Scikit Learn学习笔记</title><link>https://yanyulinxi.github.io/post/study/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BA%93/scikit-learn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 28 Sep 2021 20:18:10 +0800</pubDate><guid>https://yanyulinxi.github.io/post/study/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BA%93/scikit-learn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>概览 整体框架 unsupervised unsupervised methods cluster API validation API metrics models embedding Cluster Overview Unsupervised dimensionality reduction PCA Random projections johnson_lindenstrauss_min_dim GaussianRandomProjection SparseRandomProjection Feature agglomeration 概览 整体框架 # set numpy seed. when it comes to random functions, please leave a function to set seed. # load data x, y = sklearn.data # train test data split. # create model entity model =</description></item></channel></rss>